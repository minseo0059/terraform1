name: Terraform + Ansible Deployment

on:
  workflow_dispatch:
    inputs:
      env:
        description: 'Environment (dev/stage/prod)'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - stage
          - prod

env:
  AWS_REGION: "ap-northeast-2"
  TF_STATE_BUCKET: "your-terraform-state-bucket"
  KEY_NAME: "CH3-key"
  ANSIBLE_SSH_KEY: ${{ secrets.EC2_SSH_PRIVATE_KEY }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      # === 1. 초기 설정 ===
      - name: Checkout Code
        uses: actions/checkout@v4

      # === 2. Terraform 설치 ===
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: "1.6.6"

      # === 3. AWS 인증 ===
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # === 4. SSH 키 설정 ===
      - name: Setup SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ env.ANSIBLE_SSH_KEY }}" > ~/.ssh/CH3-key.pem
          chmod 600 ~/.ssh/CH3-key.pem

      # === 5. Terraform 초기화 ===
      - name: Terraform Init
        run: |
          terraform init \
            -backend-config="bucket=${{ env.TF_STATE_BUCKET }}" \
            -backend-config="key=${{ github.event.inputs.env }}/terraform.tfstate"

      # === 6. 인프라 배포 ===
      - name: Terraform Apply
        run: |
          terraform apply -auto-approve \
            -var="env=${{ github.event.inputs.env }}" \
            -var="key_name=${{ env.KEY_NAME }}" \
            -var="create_vpc=false"  # 기존 VPC 사용

      # ... (이후 단계는 동일) ...
