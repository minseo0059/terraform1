name: Terraform + Ansible Deployment

on:
  workflow_dispatch:
    inputs:
      env:
        description: 'Environment (dev/stage/prod)'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - stage
          - prod

env:
  AWS_REGION: "ap-northeast-2"
  TF_STATE_BUCKET: "your-terraform-state-bucket"
  KEY_NAME: "CH3-key"
  ANSIBLE_SSH_KEY: ${{ secrets.EC2_SSH_PRIVATE_KEY }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      # === 1. 초기 설정 ===
      - name: Checkout Code
        uses: actions/checkout@v4

      # === 2. Terraform 설치 ===
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: "1.6.6"

      # === 3. AWS 인증 ===
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # === 4. SSH 키 설정 ===
      - name: Setup SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ env.ANSIBLE_SSH_KEY }}" > ~/.ssh/CH3-key.pem
          chmod 600 ~/.ssh/CH3-key.pem
          echo "생성된 키 fingerprint:"
          ssh-keygen -lf ~/.ssh/CH3-key.pem

      # === 5. Terraform 초기화 ===
      - name: Terraform Init
        run: |
          terraform init \
            -backend-config="bucket=${{ env.TF_STATE_BUCKET }}" \
            -backend-config="key=${{ github.event.inputs.env }}/terraform.tfstate"

      # === 6. 인프라 배포 ===
      - name: Terraform Apply
        run: |
          terraform apply -auto-approve \
            -var="env=${{ github.event.inputs.env }}" \
            -var="key_name=${{ env.KEY_NAME }}"

      # === 7. 인스턴스 ID 추출 ===
      - name: Get Instance ID
        id: get_instance_id
        run: |
          INSTANCE_ID=$(terraform output -raw ec2_instance_id | tr -d '"' | tr -d '\n')
          if [[ ! "$INSTANCE_ID" =~ ^i-[0-9a-f]{17}$ ]]; then
            echo "::error::유효하지 않은 인스턴스 ID: $INSTANCE_ID"
            exit 1
          fi
          echo "INSTANCE_ID=$INSTANCE_ID" >> $GITHUB_OUTPUT
          echo "확인된 인스턴스 ID: $INSTANCE_ID"

      # === 8. 인스턴스 상태 대기 ===
      - name: Wait Instance Ready
        timeout-minutes: 3
        run: |
          aws ec2 wait instance-status-ok \
            --instance-ids ${{ steps.get_instance_id.outputs.INSTANCE_ID }} \
            --region ${{ env.AWS_REGION }}
          echo "인스턴스가 정상 상태입니다."

      # === 9. 공용 IP 추출 ===
      - name: Get Public IP
        id: get_ip
        run: |
          IP=$(terraform output -raw ec2_public_ip | tr -d '"' | tr -d '\n')
          if [[ ! "$IP" =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
            echo "::error::유효하지 않은 IP 주소: $IP"
            exit 1
          fi
          echo "EC2_PUBLIC_IP=$IP" >> $GITHUB_OUTPUT
          echo "확인된 공용 IP: $IP"

      # === 10. SSH 연결 테스트 ===
      - name: Test SSH Connection
        timeout-minutes: 5
        run: |
          for i in {1..15}; do
            echo "SSH 연결 시도 ($i/15)..."
            if ssh -o ConnectTimeout=10 \
              -o StrictHostKeyChecking=no \
              -i ~/.ssh/CH3-key.pem \
              ubuntu@${{ steps.get_ip.outputs.EC2_PUBLIC_IP }} \
              "echo 'SSH 연결 성공!'"; then
              exit 0
            fi
            sleep 10
          done
          echo "::error::15회 시도 후 SSH 연결 실패"
          exit 1

      # === 11. Ansible 환경 설정 ===
      - name: Setup Ansible
        run: |
          sudo apt-get update
          sudo apt-get install -y ansible

      # === 12. Ansible 인벤토리 생성 ===
      - name: Create Inventory
        run: |
          cat <<EOF > inventory.ini
          [ec2_instances]
          ${{ steps.get_ip.outputs.EC2_PUBLIC_IP }} ansible_user=ubuntu
            ansible_ssh_private_key_file=~/.ssh/CH3-key.pem
            ansible_python_interpreter=/usr/bin/python3

          [all:vars]
          ansible_ssh_common_args='-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null'
          EOF

      # === 13. 플레이북 실행 ===
      - name: Run Playbook
        run: |
          cat <<'EOF' > playbook.yml
          ---
          - name: Configure EC2 Instance
            hosts: ec2_instances
            become: yes
            tasks:
              - name: Update packages
                apt:
                  update_cache: yes
                  cache_valid_time: 3600

              - name: Install essentials
                apt:
                  name: [vim, curl, git, unzip, python3-pip]
                  state: present

              - name: Verify Python
                command: python3 --version
                register: py_result
                changed_when: false

              - name: Show Python Version
                debug:
                  var: py_result.stdout
          EOF

          ansible-playbook -i inventory.ini playbook.yml -v

      # === 14. 결과 확인 ===
      - name: Verify Deployment
        run: |
          ssh -i ~/.ssh/CH3-key.pem \
            ubuntu@${{ steps.get_ip.outputs.EC2_PUBLIC_IP }} \
            "python3 --version && echo '배포 성공!'"
